// standard clearfix
@mixin clearfix {

	&::before,
	&::after {
		content: ' ';
		display: table;
	}

	&::after {
		clear: both;
	}

	& {
		*zoom: 1;
	}
}

// aspect ratio mixin
@mixin aspect-ratio($arglist... /*$width/$ratio, $height*/
) {
	$map: keywords($arglist);
	$height: map-get($map, height) or nth-or-null($arglist, 2);
	$width: map-get($map, width)  or nth-or-null($arglist, 1);
	$ratio: map-get($map, ratio)  or if($width and $height, $width/$height, nth-or-null($arglist, 1)) or 1;
	$padding: 1/$ratio * 100%;

	&::before {
		content: '';
		position: relative;
		display: block;
		padding-bottom: $padding;
	}

	&::after {
		content: '';
		display: table;
	}
}

// Helper function
// Return null rather than throwing an error if index is outside list range.
@function nth-or-null($list, $index) {
	@return if(length($list) >= $index, nth($list, $index), null);
}

// media query mixin
@mixin mq($viewports, $constraint1: max, $constraint2: width) {
	// Set default variables
	$min: min-#{$constraint2};
	$max: max-#{$constraint2};

	@if type-of($viewports) == number {
		@media screen and (#{$constraint1}-#{$constraint2}: $viewports) {
			@content;
		}
	} @else {
		@media screen and ($min: nth($viewports, 1)) and ($max: nth($viewports, 2)) {
			@content;
		}
	}
}

// remove default styles in iOS.
@mixin remove-webkit-defaults {
	border-radius: 0;
	appearance: none;
}

// width mixin if we don't want grid

@mixin width($count, $margin, $total: 0, $end: false) {
	@if $total > 0 {
		width: ((100 / 12) * $count) - abs($margin) + (abs($margin) / $total);
	} @else {
		width: (1 / $count * 100%) - abs($margin) + (abs($margin) / $count);
	}
	@if $end == false {
		@if $margin < 0 {
			margin-right: 0;
			margin-left: abs($margin);
		} @else {
			margin-right: $margin;
			margin-left: 0;
		}
	} @else {
		margin-right: 0;
		margin-left: 0;
	}
	@if $total == 0 {
		&:nth-of-type(#{($count)+'n+0'}) {
			@if $margin < 0 {
				margin-left: 0;
			} @else {
				margin-right: 0;
			}
		}
	}

	&.end {
		@if $margin < 0 {
			margin-left: 0;
		} @else {
			margin-right: 0;
		}
	}
}

// font-size

@function calculateRem($size) {
	$remSize: $size / 16px;
	@return #{$remSize}rem;
}

@mixin font-size($size, $height: $size) {
	font-size: $size; //Fallback in px
	font-size: calculateRem($size);
	line-height: $height; //Fallback in px
	line-height: calculateRem($height);
}

@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	transform: translateY(-50%);
}

@mixin center-children($child...) {

	&::before {
		content: '\200B';
		display: inline-block;
		vertical-align: middle;
		height: 100%;
	}

	@if length($child) > 0 {
		.#{$child} {
			display: inline-block;
			vertical-align: middle;
		}
	}
}

// CSS Arrows
@mixin arrow($width: 20px, $height: 20px, $direction: up, $color: red, $pseudo: false) {

	@if $pseudo == true {
		content: '';
	}

	width: 0;
	height: 0;

	// Right
	@if $direction == right {
		border-top: $height/2 solid transparent;
		border-bottom: $height/2 solid transparent;
		border-left: $width solid $color;
	}
	// Left
	@if $direction == left {
		border-top: $height/2 solid transparent;
		border-right: $width solid $color;
		border-bottom: $height/2 solid transparent;
	}
	// Up
	@if $direction == up {
		border-right: $width/2 solid transparent;
		border-bottom: $height solid $color;
		border-left: $width/2 solid transparent;
	}
	// Down
	@if $direction == down {
		border-top: $height solid $color;
		border-right: $width/2 solid transparent;
		border-left: $width/2 solid transparent;
	}

}

// @include arrow(80px, 80px, up, $brand-primary, true);

@mixin stagger-transition-delay($i, $initial-delay, $stagger-delay) {
	@while $i > 0 {

		&:nth-child(#{$i}) {
			transition-delay: $initial-delay + $stagger-delay * $i;
		}

		$i: $i - 1;
	}
}

// USAGE: @include stagger-transition-delay(10, 0.5s, 0.1s);